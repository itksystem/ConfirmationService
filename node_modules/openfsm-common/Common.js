// Общая библиотека 1
const path = require("path");

/* Paths */
const COMMON_PATH_TO_SITE = path.join(path.resolve(), "project");
const COMMON_PATH_TO_PAGES = path.join(COMMON_PATH_TO_SITE, "src", "pages");
const COMMON_PATH_TO_PARTIALS = path.join(COMMON_PATH_TO_PAGES, "partials");

/* Pages */
const COMMON_PAGES = {
  REGISTRATION: path.join(COMMON_PATH_TO_PAGES, "registration.hbs"),
  REGISTRATION_CONFIRM: path.join(COMMON_PATH_TO_PAGES, "registration-confirm.hbs"),
  REGISTRATION_SUCCESS: path.join(COMMON_PATH_TO_PAGES, "registration-success.hbs"),
  REGISTRATION_DECLINE: path.join(COMMON_PATH_TO_PAGES, "registration-decline.hbs"),
  REGISTRATION_FAILURE: path.join(COMMON_PATH_TO_PAGES, "registration-failure.hbs"),
  LOGON: path.join(COMMON_PATH_TO_PAGES, "logon.hbs"),
  LOGON_FAILED: path.join(COMMON_PATH_TO_PAGES, "logon-failed.hbs"),
  FORGOT_PASSWORD: path.join(COMMON_PATH_TO_PAGES, "forgot-password.hbs"),
  LOGOUT: path.join(COMMON_PATH_TO_PAGES, "logout.hbs"),
  OUT_SERVICE: path.join(COMMON_PATH_TO_PAGES, "out-service.hbs"),
  SESSION_CLOSE: path.join(COMMON_PATH_TO_PAGES, "session-close.hbs"),
  APP: path.join(COMMON_PATH_TO_PAGES, "app.hbs"),
  PRODUCTS: path.join(COMMON_PATH_TO_PAGES, "app.hbs"),
  PROFILE: path.join(COMMON_PATH_TO_PAGES, "app.hbs"),
  BASKET: path.join(COMMON_PATH_TO_PAGES, "app.hbs"),
  ORDERS: path.join(COMMON_PATH_TO_PAGES, "app.hbs"),
  GET_ORDER: path.join(COMMON_PATH_TO_PAGES, "app.hbs"),
  GET_ORDER_SUCCESS: path.join(COMMON_PATH_TO_PAGES, "app.hbs"),
  GET_ORDER_ERROR: path.join(COMMON_PATH_TO_PAGES, "app.hbs"),
  PAGE_404: path.join(COMMON_PATH_TO_PAGES, "page-404.hbs"),
};

/* HTTP Codes */
const HTTP_CODES = {
  OK: { code: 200, description: "Успешный запрос." },
  CREATED: { code: 201, description: "Ресурс успешно создан." },
  ACCEPTED: { code: 202, description: "Запрос принят, но ещё не обработан." },
  NO_CONTENT: { code: 204, description: "Успешный запрос, но тело ответа пусто." },
  BAD_REQUEST: { code: 400, description: "Некорректный запрос." },
  UNAUTHORIZED: { code: 401, description: "Необходима аутентификация." },
  FORBIDDEN: { code: 403, description: "Доступ к ресурсу запрещён." },
  NOT_FOUND: { code: 404, description: "Ресурс не найден." },
  METHOD_NOT_ALLOWED: { code: 405, description: "Метод не поддерживается." },
  CONFLICT: { code: 409, description: "Конфликт запроса с текущим состоянием сервера." },
  UNPROCESSABLE_ENTITY: { code: 422, description: "Ошибка валидации данных." },
  INTERNAL_SERVER_ERROR: { code: 500, description: "Внутренняя ошибка сервера." },
  NOT_IMPLEMENTED: { code: 501, description: "Метод не реализован на сервере." },
  BAD_GATEWAY: { code: 502, description: "Ошибка шлюза." },
  SERVICE_UNAVAILABLE: { code: 503, description: "Сервис временно недоступен." },
  GATEWAY_TIMEOUT: { code: 504, description: "Время ожидания ответа от шлюза истекло." },
};

/* User Roles */
const USER_ROLES = {
  CUSTOMER: 1,
  AUDITOR: 2,
  COORDINATOR: 3,
  OWNER: 4,
};

/* Order Statuses */
const OrderStatus = Object.freeze({
  NEW: "NEW",
  DELIVERY_TYPE_SPECIFIED: "DELIVERY_TYPE_SPECIFIED",
  PAYMENT_TYPE_SPECIFIED: "PAYMENT_TYPE_SPECIFIED",
  PAYMENT_COMPLETED: "PAYMENT_COMPLETED",
  ORDER_BEING_PREPARED: "ORDER_BEING_PREPARED",
  ORDER_SENT_TO_DELIVERY: "ORDER_SENT_TO_DELIVERY",
  SUCCESSFULLY_DELIVERED: "SUCCESSFULLY_DELIVERED",
  CANCELED: "CANCELED",
});

/* Экспорт */
module.exports = {
  COMMON_PATH_TO_SITE,
  COMMON_PATH_TO_PAGES,
  COMMON_PATH_TO_PARTIALS,
  COMMON_PAGES,
  HTTP_CODES,
  USER_ROLES,
  OrderStatus,
};
