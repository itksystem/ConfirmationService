// Общая библиотека Delivery
/* SQL Queries */
const SQL = {
  CONFIRMATION: {
    DISABLE_TWO_FACTOR : `UPDATE  pa_confirmation_service.security_question_user_relations
     SET blocked = now()
     WHERE user_id=$1
     RETURNING *
   `,
    SET_SECURITY_QUESTION : `INSERT INTO pa_confirmation_service.security_question_user_relations
    (user_id, factor_id, factor_text, factor_key) 
    VALUES($1, $2, $3, $4)
    ON CONFLICT(user_id) DO UPDATE SET
      created = now(),
      blocked = null,
      factor_id = $2,
      factor_text = $3, 
      factor_key = $4
    RETURNING * 
    `,
    GET_SECURITY_QUESTION : `select * from pa_confirmation_service.security_question_user_relations where user_id = $1 and blocked is null`,
    GET_SECURITY_QUESTIONS : `select id as "questionId", factor_text as "question" from pa_confirmation_service.security_questions`,
    SQL_CREATE_2PHA_USER_REQUEST_ID : `INSERT INTO pa_confirmation_service.two_pa_requests (user_id, request_type) values ($1, $2)  RETURNING request_id as "requestId"`,
    SQL_DISABLE_2PHA_USER_REQUESTS_BY_TYPE : `UPDATE pa_confirmation_service.two_pa_requests SET blocked = now() WHERE user_id = $1 and request_type = $2 and blocked is null`,
    SQL_DISABLE_2PHA_REQUEST_BY_ID : `UPDATE pa_confirmation_service.two_pa_requests SET blocked = now() WHERE user_id = $1 and request_id = $2`,
    SQL_FIND_2PHA_USER_REQUEST_BY_ID : `SELECT request_id from pa_confirmation_service.two_pa_requests SET blocked = now() WHERE request_id = $1`,
    SQL_FIND_2PHA_USER_REQUEST_BY_USER_ID : `SELECT request_id as "requestId", status from pa_confirmation_service.two_pa_requests 
     WHERE user_id = $1 and request_type = $2 
     and blocked is null and 
     (NOW() - created) < INTERVAL '5 minutes' and attempts < 3`, 
    SQL_SET_STATUS_2PHA_USER_REQUEST_BY_ID : `
    UPDATE pa_confirmation_service.two_pa_requests 
    SET 
      status = $3, 
      attempts = attempts + 1
    WHERE user_id = $1 and request_id = $2`,
    
    SQL_GET_CONFIRMATION_ENTRY: `SELECT * from pa_confirmation_service.verification_codes where request_id = $1`,    

    GET_ACTIVE_USER_REQUEST_ID : `
    SELECT request_id as "requestId" from pa_confirmation_service.verification_codes 
    where user_id = $1 and (NOW() - created) < INTERVAL '5 minutes' and attempts < 3`, 

    GET_REQUEST_ID_STATUS : `
    SELECT request_id as "requestId" from pa_confirmation_service.verification_codes 
    where request_id = $1 and (NOW() - created) < INTERVAL '5 minutes' 
    and attempts < 3`, 

    GET_SECURITY_QUESTION :`
    select tfur.factor_id  as "id",
    case 
	    when tfur.factor_id is null  then tfur.factor_text
	      else tf.factor_text
    end as "text"
      from pa_confirmation_service.security_question_user_relations tfur 
        left join pa_confirmation_service.security_questions tf on (tfur.factor_id = tf.id and tf.id is not null )
      where user_id = $1 and tfur.blocked is null`,

     GET_SECURITY_FACTOR_KEY  : `select * from pa_confirmation_service.security_question_user_relations
      where user_id = $1 and blocked is null`, 

    SET_STATUS_REQUEST_ID : `
    UPDATE pa_confirmation_service.verification_codes 
    set 
    status = $2,
    attempts = attempts + 1 
    where request_id = $1  RETURNING * `, 

    UPDATE_SEND_CONFIRM_CODE_RESULT : `
    UPDATE pa_confirmation_service.verification_codes
    set status = $2,  sended = now()
    where request_id = $1 
    RETURNING request_id`,    

    CREATE_CONFIRM_CODE : `INSERT INTO  pa_confirmation_service.verification_codes 
    ( user_id, confirmation_type, code) values 
    ( 
      $1, 
      $2, 
      FLOOR(RANDOM() * 90000 + 10000)) RETURNING request_id`   
  }
};

const MESSAGES = {
   RU : {    
      INPUT_VALIDATION_ERROR: 'Ошибка проверки входных данных',
   }
}

/* Экспорт */
module.exports = {
  SQL, MESSAGES
};
